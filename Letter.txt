Good afternoon, Dan.
I’ve been hard at work on the API/IoC project, and while I enjoyed working on the project, the journey has made me realize that I will not be able to provide the best support for this role. My learn-on-the-fly ability and work ethic have driven me to spend several long nights attempting to get a working solution – code that deploys to the cloud and works without any intervention.  While I have gained much knowledge, I was unable to fulfill all the project requirements.
If you are interested in seeing the code, I have included the GitHub repo URL below: 
https://github.com/balee323/Node.js-RestAPI
Encouragingly, I was partially successful as I created a CDK deployment project, in Node.js, which deploys a CloudFormation stack.  The stack does these steps:
•	Provisions an EC2 instance (T2.Nano – free tier)
•	Installs all needed dependencies including NPM and Node.js to the EC2 instance
•	Deploys the Node.js Express API service to the EC2 instance
•	Starts the Express API service also automatically starts (via user-data-script)
•	Provisions a MySql instance(unable to connect properly with Express App)
I was unable to get the CDK MySql resource to connect with the Node.js service, so I ended up creating a MySql database external from the CDK stack.  I was then able to connect the Node.JS app to the MySql instance.  I used SecretsManager to fetch the credentials for the MySql instance.  My hopes were then lifted, and I was finally able to focus on the Node.JS application.  I added a single endpoint for updating a charger entry in the database.
I then decided to test a deployment of the Node app to make sure I can hit the endpoints when deployed to AWS.  I used Postman to try a “PUT” action and I was getting 500 errors.  I checked the logs and noticed that the admin user for MySql was being denied.  Also Secrets Manager was unable to pull in the secret while the Node application was running on the EC2 instance. Long story short, I tried many things to solve the issue and spent another long night (past 12am) attempting to solve this.  Eventually I conceded, but I learned a tremendous amount. 
I made some progress on the Node.js application getting these features implemented or partially implemented:
•	Logging 
•	Proper 500 and 400 status code responses
•	Authentication for Updates (haven’t implemented other endpoints yet)
•	Data layer class that provides MySql resource
Problem and lacking areas:
•	Getting CloudWatch logs to appear in LogStream
•	Getting Node.js API Connected to MySQL instance while running on an EC2 instance
•	Node.js development standards (will improve with more Node.js experience)
•	Swagger not fully implemented (I haven’t added the UI configurations)
•	Scalability – The service IoC configuration is not setup for clustering or scaling
•	Lack of CloudWatch alarms (due to lack of logs being streamed in)

Thank you for reading my report.  Perhaps our paths will cross again in the future.  
Sincerely,
Brian Lee
